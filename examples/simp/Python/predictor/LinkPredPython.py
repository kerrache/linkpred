# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _LinkPredPython
else:
    import _LinkPredPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class EdgeScore(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    i = property(_LinkPredPython.EdgeScore_i_get, _LinkPredPython.EdgeScore_i_set)
    j = property(_LinkPredPython.EdgeScore_j_get, _LinkPredPython.EdgeScore_j_set)
    score = property(_LinkPredPython.EdgeScore_score_get, _LinkPredPython.EdgeScore_score_set)

    def __init__(self):
        _LinkPredPython.EdgeScore_swiginit(self, _LinkPredPython.new_EdgeScore())
    __swig_destroy__ = _LinkPredPython.delete_EdgeScore

# Register EdgeScore in _LinkPredPython:
_LinkPredPython.EdgeScore_swigregister(EdgeScore)

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LinkPredPython.delete_SwigPyIterator

    def value(self):
        return _LinkPredPython.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _LinkPredPython.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _LinkPredPython.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _LinkPredPython.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _LinkPredPython.SwigPyIterator_equal(self, x)

    def copy(self):
        return _LinkPredPython.SwigPyIterator_copy(self)

    def next(self):
        return _LinkPredPython.SwigPyIterator_next(self)

    def __next__(self):
        return _LinkPredPython.SwigPyIterator___next__(self)

    def previous(self):
        return _LinkPredPython.SwigPyIterator_previous(self)

    def advance(self, n):
        return _LinkPredPython.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _LinkPredPython.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _LinkPredPython.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _LinkPredPython.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _LinkPredPython.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _LinkPredPython.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _LinkPredPython.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _LinkPredPython:
_LinkPredPython.SwigPyIterator_swigregister(SwigPyIterator)

class EdgeScoreVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LinkPredPython.EdgeScoreVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LinkPredPython.EdgeScoreVec___nonzero__(self)

    def __bool__(self):
        return _LinkPredPython.EdgeScoreVec___bool__(self)

    def __len__(self):
        return _LinkPredPython.EdgeScoreVec___len__(self)

    def __getslice__(self, i, j):
        return _LinkPredPython.EdgeScoreVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LinkPredPython.EdgeScoreVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LinkPredPython.EdgeScoreVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LinkPredPython.EdgeScoreVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LinkPredPython.EdgeScoreVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LinkPredPython.EdgeScoreVec___setitem__(self, *args)

    def pop(self):
        return _LinkPredPython.EdgeScoreVec_pop(self)

    def append(self, x):
        return _LinkPredPython.EdgeScoreVec_append(self, x)

    def empty(self):
        return _LinkPredPython.EdgeScoreVec_empty(self)

    def size(self):
        return _LinkPredPython.EdgeScoreVec_size(self)

    def swap(self, v):
        return _LinkPredPython.EdgeScoreVec_swap(self, v)

    def begin(self):
        return _LinkPredPython.EdgeScoreVec_begin(self)

    def end(self):
        return _LinkPredPython.EdgeScoreVec_end(self)

    def rbegin(self):
        return _LinkPredPython.EdgeScoreVec_rbegin(self)

    def rend(self):
        return _LinkPredPython.EdgeScoreVec_rend(self)

    def clear(self):
        return _LinkPredPython.EdgeScoreVec_clear(self)

    def get_allocator(self):
        return _LinkPredPython.EdgeScoreVec_get_allocator(self)

    def pop_back(self):
        return _LinkPredPython.EdgeScoreVec_pop_back(self)

    def erase(self, *args):
        return _LinkPredPython.EdgeScoreVec_erase(self, *args)

    def __init__(self, *args):
        _LinkPredPython.EdgeScoreVec_swiginit(self, _LinkPredPython.new_EdgeScoreVec(*args))

    def push_back(self, x):
        return _LinkPredPython.EdgeScoreVec_push_back(self, x)

    def front(self):
        return _LinkPredPython.EdgeScoreVec_front(self)

    def back(self):
        return _LinkPredPython.EdgeScoreVec_back(self)

    def assign(self, n, x):
        return _LinkPredPython.EdgeScoreVec_assign(self, n, x)

    def resize(self, *args):
        return _LinkPredPython.EdgeScoreVec_resize(self, *args)

    def insert(self, *args):
        return _LinkPredPython.EdgeScoreVec_insert(self, *args)

    def reserve(self, n):
        return _LinkPredPython.EdgeScoreVec_reserve(self, n)

    def capacity(self):
        return _LinkPredPython.EdgeScoreVec_capacity(self)
    __swig_destroy__ = _LinkPredPython.delete_EdgeScoreVec

# Register EdgeScoreVec in _LinkPredPython:
_LinkPredPython.EdgeScoreVec_swigregister(EdgeScoreVec)

class Predictor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LinkPredPython.Predictor_swiginit(self, _LinkPredPython.new_Predictor(*args))
    __swig_destroy__ = _LinkPredPython.delete_Predictor

    def loadnet(self, fileName):
        return _LinkPredPython.Predictor_loadnet(self, fileName)

    def predAllADA(self):
        return _LinkPredPython.Predictor_predAllADA(self)

    def predADA(self, edgeScores):
        return _LinkPredPython.Predictor_predADA(self, edgeScores)

    def predTopADA(self, k):
        return _LinkPredPython.Predictor_predTopADA(self, k)

    def predAllCNE(self):
        return _LinkPredPython.Predictor_predAllCNE(self)

    def predCNE(self, edgeScores):
        return _LinkPredPython.Predictor_predCNE(self, edgeScores)

    def predTopCNE(self, k):
        return _LinkPredPython.Predictor_predTopCNE(self, k)

    def predAllCRA(self):
        return _LinkPredPython.Predictor_predAllCRA(self)

    def predCRA(self, edgeScores):
        return _LinkPredPython.Predictor_predCRA(self, edgeScores)

    def predTopCRA(self, k):
        return _LinkPredPython.Predictor_predTopCRA(self, k)

    def predAllENC(self, *args):
        return _LinkPredPython.Predictor_predAllENC(self, *args)

    def predENC(self, *args):
        return _LinkPredPython.Predictor_predENC(self, *args)

    def predTopENC(self, *args):
        return _LinkPredPython.Predictor_predTopENC(self, *args)

    def predAllFBM(self, maxIter=50, seed=0):
        return _LinkPredPython.Predictor_predAllFBM(self, maxIter, seed)

    def predFBM(self, edgeScores, maxIter=50, seed=0):
        return _LinkPredPython.Predictor_predFBM(self, edgeScores, maxIter, seed)

    def predTopFBM(self, k, maxIter=50, seed=0):
        return _LinkPredPython.Predictor_predTopFBM(self, k, maxIter, seed)

    def predAllHDI(self):
        return _LinkPredPython.Predictor_predAllHDI(self)

    def predHDI(self, edgeScores):
        return _LinkPredPython.Predictor_predHDI(self, edgeScores)

    def predTopHDI(self, k):
        return _LinkPredPython.Predictor_predTopHDI(self, k)

    def predAllHPI(self):
        return _LinkPredPython.Predictor_predAllHPI(self)

    def predHPI(self, edgeScores):
        return _LinkPredPython.Predictor_predHPI(self, edgeScores)

    def predTopHPI(self, k):
        return _LinkPredPython.Predictor_predTopHPI(self, k)

    def predAllHRG(self, nbBeans=25, nbSamples=10000, seed=0):
        return _LinkPredPython.Predictor_predAllHRG(self, nbBeans, nbSamples, seed)

    def predHRG(self, edgeScores, nbBeans=25, nbSamples=10000, seed=0):
        return _LinkPredPython.Predictor_predHRG(self, edgeScores, nbBeans, nbSamples, seed)

    def predTopHRG(self, k, nbBeans=25, nbSamples=10000, seed=0):
        return _LinkPredPython.Predictor_predTopHRG(self, k, nbBeans, nbSamples, seed)

    def predAllHYP(self, m=1.5, L=1, gamma=2.1, zeta=1, T=0.8, seed=0):
        return _LinkPredPython.Predictor_predAllHYP(self, m, L, gamma, zeta, T, seed)

    def predHYP(self, edgeScores, m=1.5, L=1, gamma=2.1, zeta=1, T=0.8, seed=0):
        return _LinkPredPython.Predictor_predHYP(self, edgeScores, m, L, gamma, zeta, T, seed)

    def predTopHYP(self, k, m=1.5, L=1, gamma=2.1, zeta=1, T=0.8, seed=0):
        return _LinkPredPython.Predictor_predTopHYP(self, k, m, L, gamma, zeta, T, seed)

    def predAllJID(self):
        return _LinkPredPython.Predictor_predAllJID(self)

    def predJID(self, edgeScores):
        return _LinkPredPython.Predictor_predJID(self, edgeScores)

    def predTopJID(self, k):
        return _LinkPredPython.Predictor_predTopJID(self, k)

    def predAllKAB(self, horizLim=2):
        return _LinkPredPython.Predictor_predAllKAB(self, horizLim)

    def predKAB(self, edgeScores, horizLim=2):
        return _LinkPredPython.Predictor_predKAB(self, edgeScores, horizLim)

    def predTopKAB(self, k, horizLim=2):
        return _LinkPredPython.Predictor_predTopKAB(self, k, horizLim)

    def predAllLCP(self, epsilon=0.001):
        return _LinkPredPython.Predictor_predAllLCP(self, epsilon)

    def predLCP(self, edgeScores, epsilon=0.001):
        return _LinkPredPython.Predictor_predLCP(self, edgeScores, epsilon)

    def predTopLCP(self, k, epsilon=0.001):
        return _LinkPredPython.Predictor_predTopLCP(self, k, epsilon)

    def predAllLHN(self):
        return _LinkPredPython.Predictor_predAllLHN(self)

    def predLHN(self, edgeScores):
        return _LinkPredPython.Predictor_predLHN(self, edgeScores)

    def predTopLHN(self, k):
        return _LinkPredPython.Predictor_predTopLHN(self, k)

    def predAllPAT(self):
        return _LinkPredPython.Predictor_predAllPAT(self)

    def predPAT(self, edgeScores):
        return _LinkPredPython.Predictor_predPAT(self, edgeScores)

    def predTopPAT(self, k):
        return _LinkPredPython.Predictor_predTopPAT(self, k)

    def predAllRAL(self):
        return _LinkPredPython.Predictor_predAllRAL(self)

    def predRAL(self, edgeScores):
        return _LinkPredPython.Predictor_predRAL(self, edgeScores)

    def predTopRAL(self, k):
        return _LinkPredPython.Predictor_predTopRAL(self, k)

    def predAllRND(self, seed=0):
        return _LinkPredPython.Predictor_predAllRND(self, seed)

    def predRND(self, edgeScores, seed=0):
        return _LinkPredPython.Predictor_predRND(self, edgeScores, seed)

    def predTopRND(self, k, seed=0):
        return _LinkPredPython.Predictor_predTopRND(self, k, seed)

    def predAllSAI(self):
        return _LinkPredPython.Predictor_predAllSAI(self)

    def predSAI(self, edgeScores):
        return _LinkPredPython.Predictor_predSAI(self, edgeScores)

    def predTopSAI(self, k):
        return _LinkPredPython.Predictor_predTopSAI(self, k)

    def predAllSBM(self, maxIter=1000, seed=0):
        return _LinkPredPython.Predictor_predAllSBM(self, maxIter, seed)

    def predSBM(self, edgeScores, maxIter=1000, seed=0):
        return _LinkPredPython.Predictor_predSBM(self, edgeScores, maxIter, seed)

    def predTopSBM(self, k, maxIter=1000, seed=0):
        return _LinkPredPython.Predictor_predTopSBM(self, k, maxIter, seed)

    def predAllSHP(self, seed=0):
        return _LinkPredPython.Predictor_predAllSHP(self, seed)

    def predSHP(self, edgeScores, seed=0):
        return _LinkPredPython.Predictor_predSHP(self, edgeScores, seed)

    def predTopSHP(self, k, seed=0):
        return _LinkPredPython.Predictor_predTopSHP(self, k, seed)

    def predAllSOI(self):
        return _LinkPredPython.Predictor_predAllSOI(self)

    def predSOI(self, edgeScores):
        return _LinkPredPython.Predictor_predSOI(self, edgeScores)

    def predTopSOI(self, k):
        return _LinkPredPython.Predictor_predTopSOI(self, k)

# Register Predictor in _LinkPredPython:
_LinkPredPython.Predictor_swigregister(Predictor)

class PerfRes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_LinkPredPython.PerfRes_name_get, _LinkPredPython.PerfRes_name_set)
    res = property(_LinkPredPython.PerfRes_res_get, _LinkPredPython.PerfRes_res_set)

    def __init__(self):
        _LinkPredPython.PerfRes_swiginit(self, _LinkPredPython.new_PerfRes())
    __swig_destroy__ = _LinkPredPython.delete_PerfRes

# Register PerfRes in _LinkPredPython:
_LinkPredPython.PerfRes_swigregister(PerfRes)

class PerfResVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LinkPredPython.PerfResVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LinkPredPython.PerfResVec___nonzero__(self)

    def __bool__(self):
        return _LinkPredPython.PerfResVec___bool__(self)

    def __len__(self):
        return _LinkPredPython.PerfResVec___len__(self)

    def __getslice__(self, i, j):
        return _LinkPredPython.PerfResVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LinkPredPython.PerfResVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LinkPredPython.PerfResVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LinkPredPython.PerfResVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LinkPredPython.PerfResVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LinkPredPython.PerfResVec___setitem__(self, *args)

    def pop(self):
        return _LinkPredPython.PerfResVec_pop(self)

    def append(self, x):
        return _LinkPredPython.PerfResVec_append(self, x)

    def empty(self):
        return _LinkPredPython.PerfResVec_empty(self)

    def size(self):
        return _LinkPredPython.PerfResVec_size(self)

    def swap(self, v):
        return _LinkPredPython.PerfResVec_swap(self, v)

    def begin(self):
        return _LinkPredPython.PerfResVec_begin(self)

    def end(self):
        return _LinkPredPython.PerfResVec_end(self)

    def rbegin(self):
        return _LinkPredPython.PerfResVec_rbegin(self)

    def rend(self):
        return _LinkPredPython.PerfResVec_rend(self)

    def clear(self):
        return _LinkPredPython.PerfResVec_clear(self)

    def get_allocator(self):
        return _LinkPredPython.PerfResVec_get_allocator(self)

    def pop_back(self):
        return _LinkPredPython.PerfResVec_pop_back(self)

    def erase(self, *args):
        return _LinkPredPython.PerfResVec_erase(self, *args)

    def __init__(self, *args):
        _LinkPredPython.PerfResVec_swiginit(self, _LinkPredPython.new_PerfResVec(*args))

    def push_back(self, x):
        return _LinkPredPython.PerfResVec_push_back(self, x)

    def front(self):
        return _LinkPredPython.PerfResVec_front(self)

    def back(self):
        return _LinkPredPython.PerfResVec_back(self)

    def assign(self, n, x):
        return _LinkPredPython.PerfResVec_assign(self, n, x)

    def resize(self, *args):
        return _LinkPredPython.PerfResVec_resize(self, *args)

    def insert(self, *args):
        return _LinkPredPython.PerfResVec_insert(self, *args)

    def reserve(self, n):
        return _LinkPredPython.PerfResVec_reserve(self, n)

    def capacity(self):
        return _LinkPredPython.PerfResVec_capacity(self)
    __swig_destroy__ = _LinkPredPython.delete_PerfResVec

# Register PerfResVec in _LinkPredPython:
_LinkPredPython.PerfResVec_swigregister(PerfResVec)

class Evaluator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LinkPredPython.Evaluator_swiginit(self, _LinkPredPython.new_Evaluator(*args))
    __swig_destroy__ = _LinkPredPython.delete_Evaluator

    def addADA(self, *args):
        return _LinkPredPython.Evaluator_addADA(self, *args)

    def addCNE(self, *args):
        return _LinkPredPython.Evaluator_addCNE(self, *args)

    def addCRA(self, *args):
        return _LinkPredPython.Evaluator_addCRA(self, *args)

    def addENC(self, *args):
        return _LinkPredPython.Evaluator_addENC(self, *args)

    def addFBM(self, *args):
        return _LinkPredPython.Evaluator_addFBM(self, *args)

    def addHDI(self, *args):
        return _LinkPredPython.Evaluator_addHDI(self, *args)

    def addHPI(self, *args):
        return _LinkPredPython.Evaluator_addHPI(self, *args)

    def addHRG(self, *args):
        return _LinkPredPython.Evaluator_addHRG(self, *args)

    def addHYP(self, *args):
        return _LinkPredPython.Evaluator_addHYP(self, *args)

    def addJID(self, *args):
        return _LinkPredPython.Evaluator_addJID(self, *args)

    def addKAB(self, *args):
        return _LinkPredPython.Evaluator_addKAB(self, *args)

    def addLCP(self, *args):
        return _LinkPredPython.Evaluator_addLCP(self, *args)

    def addLHN(self, *args):
        return _LinkPredPython.Evaluator_addLHN(self, *args)

    def addPAT(self, *args):
        return _LinkPredPython.Evaluator_addPAT(self, *args)

    def addRAL(self, *args):
        return _LinkPredPython.Evaluator_addRAL(self, *args)

    def addRND(self, *args):
        return _LinkPredPython.Evaluator_addRND(self, *args)

    def addSAI(self, *args):
        return _LinkPredPython.Evaluator_addSAI(self, *args)

    def addSBM(self, *args):
        return _LinkPredPython.Evaluator_addSBM(self, *args)

    def addSHP(self, *args):
        return _LinkPredPython.Evaluator_addSHP(self, *args)

    def addSOI(self, *args):
        return _LinkPredPython.Evaluator_addSOI(self, *args)

    def addROC(self):
        return _LinkPredPython.Evaluator_addROC(self)

    def addPR(self):
        return _LinkPredPython.Evaluator_addPR(self)

    def addTPR(self):
        return _LinkPredPython.Evaluator_addTPR(self)

    def run(self, *args):
        return _LinkPredPython.Evaluator_run(self, *args)

    def getPerfRes(self, iter):
        return _LinkPredPython.Evaluator_getPerfRes(self, iter)

# Register Evaluator in _LinkPredPython:
_LinkPredPython.Evaluator_swigregister(Evaluator)



