/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


 #include "../../include/linkpred/simp/edgescore.hpp"
 

#include <string>


#include "../../include/linkpred/simp/predictor.hpp"


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< LinkPred::Simp::EdgeScore > *new_std_vector_Sl_LinkPred_Simp_EdgeScore_Sg___SWIG_2(jint count,LinkPred::Simp::EdgeScore const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< LinkPred::Simp::EdgeScore >(static_cast<std::vector< LinkPred::Simp::EdgeScore >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_LinkPred_Simp_EdgeScore_Sg__doSize(std::vector< LinkPred::Simp::EdgeScore > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_LinkPred_Simp_EdgeScore_Sg__doAdd__SWIG_0(std::vector< LinkPred::Simp::EdgeScore > *self,std::vector< LinkPred::Simp::EdgeScore >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_LinkPred_Simp_EdgeScore_Sg__doAdd__SWIG_1(std::vector< LinkPred::Simp::EdgeScore > *self,jint index,std::vector< LinkPred::Simp::EdgeScore >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< LinkPred::Simp::EdgeScore >::value_type std_vector_Sl_LinkPred_Simp_EdgeScore_Sg__doRemove(std::vector< LinkPred::Simp::EdgeScore > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          LinkPred::Simp::EdgeScore const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< LinkPred::Simp::EdgeScore >::value_type const &std_vector_Sl_LinkPred_Simp_EdgeScore_Sg__doGet(std::vector< LinkPred::Simp::EdgeScore > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< LinkPred::Simp::EdgeScore >::value_type std_vector_Sl_LinkPred_Simp_EdgeScore_Sg__doSet(std::vector< LinkPred::Simp::EdgeScore > *self,jint index,std::vector< LinkPred::Simp::EdgeScore >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          LinkPred::Simp::EdgeScore const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_LinkPred_Simp_EdgeScore_Sg__doRemoveRange(std::vector< LinkPred::Simp::EdgeScore > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< LinkPred::Simp::EdgeScoreByID > *new_std_vector_Sl_LinkPred_Simp_EdgeScoreByID_Sg___SWIG_2(jint count,LinkPred::Simp::EdgeScoreByID const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< LinkPred::Simp::EdgeScoreByID >(static_cast<std::vector< LinkPred::Simp::EdgeScoreByID >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_LinkPred_Simp_EdgeScoreByID_Sg__doSize(std::vector< LinkPred::Simp::EdgeScoreByID > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_LinkPred_Simp_EdgeScoreByID_Sg__doAdd__SWIG_0(std::vector< LinkPred::Simp::EdgeScoreByID > *self,std::vector< LinkPred::Simp::EdgeScoreByID >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_LinkPred_Simp_EdgeScoreByID_Sg__doAdd__SWIG_1(std::vector< LinkPred::Simp::EdgeScoreByID > *self,jint index,std::vector< LinkPred::Simp::EdgeScoreByID >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< LinkPred::Simp::EdgeScoreByID >::value_type std_vector_Sl_LinkPred_Simp_EdgeScoreByID_Sg__doRemove(std::vector< LinkPred::Simp::EdgeScoreByID > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          LinkPred::Simp::EdgeScoreByID const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< LinkPred::Simp::EdgeScoreByID >::value_type const &std_vector_Sl_LinkPred_Simp_EdgeScoreByID_Sg__doGet(std::vector< LinkPred::Simp::EdgeScoreByID > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< LinkPred::Simp::EdgeScoreByID >::value_type std_vector_Sl_LinkPred_Simp_EdgeScoreByID_Sg__doSet(std::vector< LinkPred::Simp::EdgeScoreByID > *self,jint index,std::vector< LinkPred::Simp::EdgeScoreByID >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          LinkPred::Simp::EdgeScoreByID const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_LinkPred_Simp_EdgeScoreByID_Sg__doRemoveRange(std::vector< LinkPred::Simp::EdgeScoreByID > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }

 #include "../../include/linkpred/simp/perfres.hpp"
 

#include "../../include/linkpred/simp/evaluator.hpp"

SWIGINTERN std::vector< LinkPred::Simp::PerfRes > *new_std_vector_Sl_LinkPred_Simp_PerfRes_Sg___SWIG_2(jint count,LinkPred::Simp::PerfRes const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< LinkPred::Simp::PerfRes >(static_cast<std::vector< LinkPred::Simp::PerfRes >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_LinkPred_Simp_PerfRes_Sg__doSize(std::vector< LinkPred::Simp::PerfRes > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_LinkPred_Simp_PerfRes_Sg__doAdd__SWIG_0(std::vector< LinkPred::Simp::PerfRes > *self,std::vector< LinkPred::Simp::PerfRes >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_LinkPred_Simp_PerfRes_Sg__doAdd__SWIG_1(std::vector< LinkPred::Simp::PerfRes > *self,jint index,std::vector< LinkPred::Simp::PerfRes >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< LinkPred::Simp::PerfRes >::value_type std_vector_Sl_LinkPred_Simp_PerfRes_Sg__doRemove(std::vector< LinkPred::Simp::PerfRes > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          LinkPred::Simp::PerfRes const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< LinkPred::Simp::PerfRes >::value_type const &std_vector_Sl_LinkPred_Simp_PerfRes_Sg__doGet(std::vector< LinkPred::Simp::PerfRes > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< LinkPred::Simp::PerfRes >::value_type std_vector_Sl_LinkPred_Simp_PerfRes_Sg__doSet(std::vector< LinkPred::Simp::PerfRes > *self,jint index,std::vector< LinkPred::Simp::PerfRes >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          LinkPred::Simp::PerfRes const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_LinkPred_Simp_PerfRes_Sg__doRemoveRange(std::vector< LinkPred::Simp::PerfRes > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_EdgeScore_1i_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::EdgeScore *arg1 = (LinkPred::Simp::EdgeScore *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::EdgeScore **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->i = *arg2;
}


SWIGEXPORT jstring JNICALL Java_LinkPredJavaJNI_EdgeScore_1i_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  LinkPred::Simp::EdgeScore *arg1 = (LinkPred::Simp::EdgeScore *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::EdgeScore **)&jarg1; 
  result = (std::string *) & ((arg1)->i);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_EdgeScore_1j_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::EdgeScore *arg1 = (LinkPred::Simp::EdgeScore *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::EdgeScore **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->j = *arg2;
}


SWIGEXPORT jstring JNICALL Java_LinkPredJavaJNI_EdgeScore_1j_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  LinkPred::Simp::EdgeScore *arg1 = (LinkPred::Simp::EdgeScore *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::EdgeScore **)&jarg1; 
  result = (std::string *) & ((arg1)->j);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_EdgeScore_1score_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  LinkPred::Simp::EdgeScore *arg1 = (LinkPred::Simp::EdgeScore *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::EdgeScore **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->score = arg2;
}


SWIGEXPORT jdouble JNICALL Java_LinkPredJavaJNI_EdgeScore_1score_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  LinkPred::Simp::EdgeScore *arg1 = (LinkPred::Simp::EdgeScore *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::EdgeScore **)&jarg1; 
  result = (double) ((arg1)->score);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_new_1EdgeScore(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  LinkPred::Simp::EdgeScore *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (LinkPred::Simp::EdgeScore *)new LinkPred::Simp::EdgeScore();
  *(LinkPred::Simp::EdgeScore **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_delete_1EdgeScore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LinkPred::Simp::EdgeScore *arg1 = (LinkPred::Simp::EdgeScore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LinkPred::Simp::EdgeScore **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_EdgeScoreByID_1i_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  LinkPred::Simp::EdgeScoreByID *arg1 = (LinkPred::Simp::EdgeScoreByID *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::EdgeScoreByID **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i = arg2;
}


SWIGEXPORT jint JNICALL Java_LinkPredJavaJNI_EdgeScoreByID_1i_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  LinkPred::Simp::EdgeScoreByID *arg1 = (LinkPred::Simp::EdgeScoreByID *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::EdgeScoreByID **)&jarg1; 
  result = (int) ((arg1)->i);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_EdgeScoreByID_1j_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  LinkPred::Simp::EdgeScoreByID *arg1 = (LinkPred::Simp::EdgeScoreByID *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::EdgeScoreByID **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->j = arg2;
}


SWIGEXPORT jint JNICALL Java_LinkPredJavaJNI_EdgeScoreByID_1j_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  LinkPred::Simp::EdgeScoreByID *arg1 = (LinkPred::Simp::EdgeScoreByID *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::EdgeScoreByID **)&jarg1; 
  result = (int) ((arg1)->j);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_EdgeScoreByID_1score_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  LinkPred::Simp::EdgeScoreByID *arg1 = (LinkPred::Simp::EdgeScoreByID *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::EdgeScoreByID **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->score = arg2;
}


SWIGEXPORT jdouble JNICALL Java_LinkPredJavaJNI_EdgeScoreByID_1score_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  LinkPred::Simp::EdgeScoreByID *arg1 = (LinkPred::Simp::EdgeScoreByID *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::EdgeScoreByID **)&jarg1; 
  result = (double) ((arg1)->score);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_new_1EdgeScoreByID(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  LinkPred::Simp::EdgeScoreByID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (LinkPred::Simp::EdgeScoreByID *)new LinkPred::Simp::EdgeScoreByID();
  *(LinkPred::Simp::EdgeScoreByID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_delete_1EdgeScoreByID(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LinkPred::Simp::EdgeScoreByID *arg1 = (LinkPred::Simp::EdgeScoreByID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LinkPred::Simp::EdgeScoreByID **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_new_1EdgeScoreVec_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< LinkPred::Simp::EdgeScore > *)new std::vector< LinkPred::Simp::EdgeScore >();
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_new_1EdgeScoreVec_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg1 = 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > const & reference is null");
    return 0;
  } 
  result = (std::vector< LinkPred::Simp::EdgeScore > *)new std::vector< LinkPred::Simp::EdgeScore >((std::vector< LinkPred::Simp::EdgeScore > const &)*arg1);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_EdgeScoreVec_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg1 = (std::vector< LinkPred::Simp::EdgeScore > *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg1; 
  result = ((std::vector< LinkPred::Simp::EdgeScore > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_EdgeScoreVec_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< LinkPred::Simp::EdgeScore > *arg1 = (std::vector< LinkPred::Simp::EdgeScore > *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg1; 
  arg2 = (std::vector< LinkPred::Simp::EdgeScore >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_LinkPredJavaJNI_EdgeScoreVec_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg1 = (std::vector< LinkPred::Simp::EdgeScore > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg1; 
  result = (bool)((std::vector< LinkPred::Simp::EdgeScore > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_EdgeScoreVec_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< LinkPred::Simp::EdgeScore > *arg1 = (std::vector< LinkPred::Simp::EdgeScore > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_new_1EdgeScoreVec_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  LinkPred::Simp::EdgeScore *arg2 = 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(LinkPred::Simp::EdgeScore **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LinkPred::Simp::EdgeScore const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< LinkPred::Simp::EdgeScore > *)new_std_vector_Sl_LinkPred_Simp_EdgeScore_Sg___SWIG_2(arg1,(LinkPred::Simp::EdgeScore const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_LinkPredJavaJNI_EdgeScoreVec_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg1 = (std::vector< LinkPred::Simp::EdgeScore > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg1; 
  try {
    result = std_vector_Sl_LinkPred_Simp_EdgeScore_Sg__doSize((std::vector< LinkPred::Simp::EdgeScore > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_EdgeScoreVec_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< LinkPred::Simp::EdgeScore > *arg1 = (std::vector< LinkPred::Simp::EdgeScore > *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_LinkPred_Simp_EdgeScore_Sg__doAdd__SWIG_0(arg1,(LinkPred::Simp::EdgeScore const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_EdgeScoreVec_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< LinkPred::Simp::EdgeScore > *arg1 = (std::vector< LinkPred::Simp::EdgeScore > *) 0 ;
  jint arg2 ;
  std::vector< LinkPred::Simp::EdgeScore >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< LinkPred::Simp::EdgeScore >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_LinkPred_Simp_EdgeScore_Sg__doAdd__SWIG_1(arg1,arg2,(LinkPred::Simp::EdgeScore const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_EdgeScoreVec_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg1 = (std::vector< LinkPred::Simp::EdgeScore > *) 0 ;
  jint arg2 ;
  std::vector< LinkPred::Simp::EdgeScore >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_LinkPred_Simp_EdgeScore_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< LinkPred::Simp::EdgeScore >::value_type **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >::value_type((const std::vector< LinkPred::Simp::EdgeScore >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_EdgeScoreVec_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg1 = (std::vector< LinkPred::Simp::EdgeScore > *) 0 ;
  jint arg2 ;
  std::vector< LinkPred::Simp::EdgeScore >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< LinkPred::Simp::EdgeScore >::value_type *) &std_vector_Sl_LinkPred_Simp_EdgeScore_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< LinkPred::Simp::EdgeScore >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_EdgeScoreVec_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg1 = (std::vector< LinkPred::Simp::EdgeScore > *) 0 ;
  jint arg2 ;
  std::vector< LinkPred::Simp::EdgeScore >::value_type *arg3 = 0 ;
  std::vector< LinkPred::Simp::EdgeScore >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< LinkPred::Simp::EdgeScore >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_LinkPred_Simp_EdgeScore_Sg__doSet(arg1,arg2,(LinkPred::Simp::EdgeScore const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< LinkPred::Simp::EdgeScore >::value_type **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >::value_type((const std::vector< LinkPred::Simp::EdgeScore >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_EdgeScoreVec_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< LinkPred::Simp::EdgeScore > *arg1 = (std::vector< LinkPred::Simp::EdgeScore > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_LinkPred_Simp_EdgeScore_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_delete_1EdgeScoreVec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< LinkPred::Simp::EdgeScore > *arg1 = (std::vector< LinkPred::Simp::EdgeScore > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_new_1EdgeScoreByIDVec_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< LinkPred::Simp::EdgeScoreByID > *)new std::vector< LinkPred::Simp::EdgeScoreByID >();
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_new_1EdgeScoreByIDVec_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > *arg1 = 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScoreByID > const & reference is null");
    return 0;
  } 
  result = (std::vector< LinkPred::Simp::EdgeScoreByID > *)new std::vector< LinkPred::Simp::EdgeScoreByID >((std::vector< LinkPred::Simp::EdgeScoreByID > const &)*arg1);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_EdgeScoreByIDVec_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > *arg1 = (std::vector< LinkPred::Simp::EdgeScoreByID > *) 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jarg1; 
  result = ((std::vector< LinkPred::Simp::EdgeScoreByID > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_EdgeScoreByIDVec_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< LinkPred::Simp::EdgeScoreByID > *arg1 = (std::vector< LinkPred::Simp::EdgeScoreByID > *) 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jarg1; 
  arg2 = (std::vector< LinkPred::Simp::EdgeScoreByID >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_LinkPredJavaJNI_EdgeScoreByIDVec_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > *arg1 = (std::vector< LinkPred::Simp::EdgeScoreByID > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jarg1; 
  result = (bool)((std::vector< LinkPred::Simp::EdgeScoreByID > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_EdgeScoreByIDVec_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< LinkPred::Simp::EdgeScoreByID > *arg1 = (std::vector< LinkPred::Simp::EdgeScoreByID > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_new_1EdgeScoreByIDVec_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  LinkPred::Simp::EdgeScoreByID *arg2 = 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(LinkPred::Simp::EdgeScoreByID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LinkPred::Simp::EdgeScoreByID const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< LinkPred::Simp::EdgeScoreByID > *)new_std_vector_Sl_LinkPred_Simp_EdgeScoreByID_Sg___SWIG_2(arg1,(LinkPred::Simp::EdgeScoreByID const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_LinkPredJavaJNI_EdgeScoreByIDVec_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > *arg1 = (std::vector< LinkPred::Simp::EdgeScoreByID > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jarg1; 
  try {
    result = std_vector_Sl_LinkPred_Simp_EdgeScoreByID_Sg__doSize((std::vector< LinkPred::Simp::EdgeScoreByID > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_EdgeScoreByIDVec_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< LinkPred::Simp::EdgeScoreByID > *arg1 = (std::vector< LinkPred::Simp::EdgeScoreByID > *) 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScoreByID >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScoreByID >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_LinkPred_Simp_EdgeScoreByID_Sg__doAdd__SWIG_0(arg1,(LinkPred::Simp::EdgeScoreByID const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_EdgeScoreByIDVec_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< LinkPred::Simp::EdgeScoreByID > *arg1 = (std::vector< LinkPred::Simp::EdgeScoreByID > *) 0 ;
  jint arg2 ;
  std::vector< LinkPred::Simp::EdgeScoreByID >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< LinkPred::Simp::EdgeScoreByID >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScoreByID >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_LinkPred_Simp_EdgeScoreByID_Sg__doAdd__SWIG_1(arg1,arg2,(LinkPred::Simp::EdgeScoreByID const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_EdgeScoreByIDVec_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > *arg1 = (std::vector< LinkPred::Simp::EdgeScoreByID > *) 0 ;
  jint arg2 ;
  std::vector< LinkPred::Simp::EdgeScoreByID >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_LinkPred_Simp_EdgeScoreByID_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< LinkPred::Simp::EdgeScoreByID >::value_type **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >::value_type((const std::vector< LinkPred::Simp::EdgeScoreByID >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_EdgeScoreByIDVec_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > *arg1 = (std::vector< LinkPred::Simp::EdgeScoreByID > *) 0 ;
  jint arg2 ;
  std::vector< LinkPred::Simp::EdgeScoreByID >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< LinkPred::Simp::EdgeScoreByID >::value_type *) &std_vector_Sl_LinkPred_Simp_EdgeScoreByID_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< LinkPred::Simp::EdgeScoreByID >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_EdgeScoreByIDVec_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > *arg1 = (std::vector< LinkPred::Simp::EdgeScoreByID > *) 0 ;
  jint arg2 ;
  std::vector< LinkPred::Simp::EdgeScoreByID >::value_type *arg3 = 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< LinkPred::Simp::EdgeScoreByID >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScoreByID >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_LinkPred_Simp_EdgeScoreByID_Sg__doSet(arg1,arg2,(LinkPred::Simp::EdgeScoreByID const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< LinkPred::Simp::EdgeScoreByID >::value_type **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >::value_type((const std::vector< LinkPred::Simp::EdgeScoreByID >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_EdgeScoreByIDVec_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< LinkPred::Simp::EdgeScoreByID > *arg1 = (std::vector< LinkPred::Simp::EdgeScoreByID > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_LinkPred_Simp_EdgeScoreByID_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_delete_1EdgeScoreByIDVec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< LinkPred::Simp::EdgeScoreByID > *arg1 = (std::vector< LinkPred::Simp::EdgeScoreByID > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_new_1Predictor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (LinkPred::Simp::Predictor *)new LinkPred::Simp::Predictor();
  *(LinkPred::Simp::Predictor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_new_1Predictor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = 0 ;
  LinkPred::Simp::Predictor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LinkPred::Simp::Predictor const & reference is null");
    return 0;
  } 
  result = (LinkPred::Simp::Predictor *)new LinkPred::Simp::Predictor((LinkPred::Simp::Predictor const &)*arg1);
  *(LinkPred::Simp::Predictor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_delete_1Predictor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_LinkPredJavaJNI_Predictor_1getNbNodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (int)((LinkPred::Simp::Predictor const *)arg1)->getNbNodes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_LinkPredJavaJNI_Predictor_1getLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((LinkPred::Simp::Predictor const *)arg1)->getLabel(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_LinkPredJavaJNI_Predictor_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((LinkPred::Simp::Predictor const *)arg1)->getID((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_LinkPredJavaJNI_Predictor_1isEdgeByID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((LinkPred::Simp::Predictor const *)arg1)->isEdgeByID(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_LinkPredJavaJNI_Predictor_1isEdgeByLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)((LinkPred::Simp::Predictor const *)arg1)->isEdgeByLabel((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1loadnet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->loadnet(arg2);
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllADA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllADA();
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predADA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  (arg1)->predADA(*arg2);
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopADA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predTopADA(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllCNE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllCNE();
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predCNE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  (arg1)->predCNE(*arg2);
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopCNE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predTopCNE(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllCRA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllCRA();
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predCRA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  (arg1)->predCRA(*arg2);
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopCRA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predTopCRA(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllECL_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jint jarg7) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  long arg7 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (long)jarg7; 
  result = (arg1)->predAllECL(arg2,arg3,arg4,arg5,arg6,arg7);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllECL_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (arg1)->predAllECL(arg2,arg3,arg4,arg5,arg6);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllECL_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int arg4 ;
  double arg5 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  result = (arg1)->predAllECL(arg2,arg3,arg4,arg5);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllECL_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int arg4 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  result = (arg1)->predAllECL(arg2,arg3,arg4);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllECL_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->predAllECL(arg2,arg3);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllECL_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::string arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->predAllECL(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllECL_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllECL();
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predECL_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jint jarg5, jdouble jarg6, jdouble jarg7, jint jarg8) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  int arg5 ;
  double arg6 ;
  double arg7 ;
  long arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (long)jarg8; 
  (arg1)->predECL(*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predECL_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jint jarg5, jdouble jarg6, jdouble jarg7) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  int arg5 ;
  double arg6 ;
  double arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  (arg1)->predECL(*arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predECL_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jint jarg5, jdouble jarg6) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  int arg5 ;
  double arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  (arg1)->predECL(*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predECL_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jint jarg5) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  (arg1)->predECL(*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predECL_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->predECL(*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predECL_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->predECL(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predECL_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  (arg1)->predECL(*arg2);
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopECL_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4, jint jarg5, jdouble jarg6, jdouble jarg7, jint jarg8) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  int arg5 ;
  double arg6 ;
  double arg7 ;
  long arg8 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (long)jarg8; 
  result = (arg1)->predTopECL(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopECL_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4, jint jarg5, jdouble jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  int arg5 ;
  double arg6 ;
  double arg7 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  result = (arg1)->predTopECL(arg2,arg3,arg4,arg5,arg6,arg7);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopECL_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4, jint jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  int arg5 ;
  double arg6 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  result = (arg1)->predTopECL(arg2,arg3,arg4,arg5,arg6);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopECL_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4, jint jarg5) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  int arg5 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  result = (arg1)->predTopECL(arg2,arg3,arg4,arg5);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopECL_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (arg1)->predTopECL(arg2,arg3,arg4);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopECL_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::string arg3 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->predTopECL(arg2,arg3);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopECL_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predTopECL(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllESM_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int arg4 ;
  long arg5 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  arg5 = (long)jarg5; 
  result = (arg1)->predAllESM(arg2,arg3,arg4,arg5);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllESM_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int arg4 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  result = (arg1)->predAllESM(arg2,arg3,arg4);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllESM_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->predAllESM(arg2,arg3);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllESM_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::string arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->predAllESM(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllESM_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllESM();
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predESM_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jint jarg5, jint jarg6) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  int arg5 ;
  long arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  arg6 = (long)jarg6; 
  (arg1)->predESM(*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predESM_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jint jarg5) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  (arg1)->predESM(*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predESM_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->predESM(*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predESM_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->predESM(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predESM_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  (arg1)->predESM(*arg2);
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopESM_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4, jint jarg5, jint jarg6) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  int arg5 ;
  long arg6 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  arg6 = (long)jarg6; 
  result = (arg1)->predTopESM(arg2,arg3,arg4,arg5,arg6);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopESM_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4, jint jarg5) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  int arg5 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  result = (arg1)->predTopESM(arg2,arg3,arg4,arg5);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopESM_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (arg1)->predTopESM(arg2,arg3,arg4);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopESM_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::string arg3 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->predTopESM(arg2,arg3);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopESM_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predTopESM(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllFBM_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  long arg3 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (long)jarg3; 
  result = (arg1)->predAllFBM(arg2,arg3);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllFBM_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predAllFBM(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllFBM_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllFBM();
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predFBM_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  int arg3 ;
  long arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (long)jarg4; 
  (arg1)->predFBM(*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predFBM_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->predFBM(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predFBM_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  (arg1)->predFBM(*arg2);
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopFBM_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  int arg3 ;
  long arg4 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (long)jarg4; 
  result = (arg1)->predTopFBM(arg2,arg3,arg4);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopFBM_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->predTopFBM(arg2,arg3);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopFBM_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predTopFBM(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHDI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllHDI();
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predHDI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  (arg1)->predHDI(*arg2);
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopHDI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predTopHDI(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHPI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllHPI();
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predHPI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  (arg1)->predHPI(*arg2);
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopHPI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predTopHPI(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHRG_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  int arg3 ;
  long arg4 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (long)jarg4; 
  result = (arg1)->predAllHRG(arg2,arg3,arg4);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHRG_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->predAllHRG(arg2,arg3);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHRG_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predAllHRG(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHRG_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllHRG();
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predHRG_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jint jarg5) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  long arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (long)jarg5; 
  (arg1)->predHRG(*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predHRG_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->predHRG(*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predHRG_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->predHRG(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predHRG_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  (arg1)->predHRG(*arg2);
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopHRG_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  long arg5 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (long)jarg5; 
  result = (arg1)->predTopHRG(arg2,arg3,arg4,arg5);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopHRG_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (arg1)->predTopHRG(arg2,arg3,arg4);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopHRG_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->predTopHRG(arg2,arg3);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopHRG_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predTopHRG(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHYP_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jint jarg7) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  long arg7 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (long)jarg7; 
  result = (arg1)->predAllHYP(arg2,arg3,arg4,arg5,arg6,arg7);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHYP_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (arg1)->predAllHYP(arg2,arg3,arg4,arg5,arg6);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHYP_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (arg1)->predAllHYP(arg2,arg3,arg4,arg5);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHYP_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (arg1)->predAllHYP(arg2,arg3,arg4);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHYP_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  double arg2 ;
  double arg3 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (arg1)->predAllHYP(arg2,arg3);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHYP_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  double arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (arg1)->predAllHYP(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHYP_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllHYP();
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predHYP_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jint jarg8) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  long arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (long)jarg8; 
  (arg1)->predHYP(*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predHYP_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  (arg1)->predHYP(*arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predHYP_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  (arg1)->predHYP(*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predHYP_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->predHYP(*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predHYP_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->predHYP(*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predHYP_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  (arg1)->predHYP(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predHYP_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  (arg1)->predHYP(*arg2);
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopHYP_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jint jarg8) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  long arg8 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (long)jarg8; 
  result = (arg1)->predTopHYP(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopHYP_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  result = (arg1)->predTopHYP(arg2,arg3,arg4,arg5,arg6,arg7);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopHYP_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (arg1)->predTopHYP(arg2,arg3,arg4,arg5,arg6);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopHYP_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (arg1)->predTopHYP(arg2,arg3,arg4,arg5);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopHYP_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (arg1)->predTopHYP(arg2,arg3,arg4);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopHYP_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  double arg3 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (arg1)->predTopHYP(arg2,arg3);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopHYP_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predTopHYP(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllJID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllJID();
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predJID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  (arg1)->predJID(*arg2);
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopJID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predTopJID(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllKAB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predAllKAB(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllKAB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllKAB();
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predKAB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->predKAB(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predKAB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  (arg1)->predKAB(*arg2);
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopKAB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->predTopKAB(arg2,arg3);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopKAB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predTopKAB(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllLCP_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  double arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (arg1)->predAllLCP(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllLCP_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllLCP();
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predLCP_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  (arg1)->predLCP(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predLCP_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  (arg1)->predLCP(*arg2);
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopLCP_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  double arg3 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (arg1)->predTopLCP(arg2,arg3);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopLCP_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predTopLCP(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllLHN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllLHN();
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predLHN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  (arg1)->predLHN(*arg2);
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopLHN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predTopLHN(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllPAT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllPAT();
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predPAT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  (arg1)->predPAT(*arg2);
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopPAT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predTopPAT(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllRAL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllRAL();
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predRAL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  (arg1)->predRAL(*arg2);
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopRAL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predTopRAL(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllRND_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  long arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->predAllRND(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllRND_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllRND();
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predRND_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  long arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  arg3 = (long)jarg3; 
  (arg1)->predRND(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predRND_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  (arg1)->predRND(*arg2);
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopRND_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  long arg3 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (long)jarg3; 
  result = (arg1)->predTopRND(arg2,arg3);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopRND_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predTopRND(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllSAI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllSAI();
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predSAI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  (arg1)->predSAI(*arg2);
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopSAI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predTopSAI(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllSBM_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  long arg3 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (long)jarg3; 
  result = (arg1)->predAllSBM(arg2,arg3);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllSBM_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predAllSBM(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllSBM_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllSBM();
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predSBM_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  int arg3 ;
  long arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (long)jarg4; 
  (arg1)->predSBM(*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predSBM_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->predSBM(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predSBM_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  (arg1)->predSBM(*arg2);
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopSBM_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  int arg3 ;
  long arg4 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (long)jarg4; 
  result = (arg1)->predTopSBM(arg2,arg3,arg4);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopSBM_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->predTopSBM(arg2,arg3);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopSBM_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predTopSBM(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllSHP_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  long arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->predAllSHP(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllSHP_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllSHP();
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predSHP_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  long arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  arg3 = (long)jarg3; 
  (arg1)->predSHP(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predSHP_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  (arg1)->predSHP(*arg2);
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopSHP_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  long arg3 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (long)jarg3; 
  result = (arg1)->predTopSHP(arg2,arg3);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopSHP_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predTopSHP(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllSOI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllSOI();
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Predictor_1predSOI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScore > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::EdgeScore > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::EdgeScore > & reference is null");
    return ;
  } 
  (arg1)->predSOI(*arg2);
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predTopSOI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScore > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predTopSOI(arg2);
  *(std::vector< LinkPred::Simp::EdgeScore > **)&jresult = new std::vector< LinkPred::Simp::EdgeScore >((const std::vector< LinkPred::Simp::EdgeScore > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllADAByID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllADAByID();
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllCNEByID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllCNEByID();
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllCRAByID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllCRAByID();
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllECLByID_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jint jarg7) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  long arg7 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (long)jarg7; 
  result = (arg1)->predAllECLByID(arg2,arg3,arg4,arg5,arg6,arg7);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllECLByID_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (arg1)->predAllECLByID(arg2,arg3,arg4,arg5,arg6);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllECLByID_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int arg4 ;
  double arg5 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  result = (arg1)->predAllECLByID(arg2,arg3,arg4,arg5);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllECLByID_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int arg4 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  result = (arg1)->predAllECLByID(arg2,arg3,arg4);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllECLByID_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->predAllECLByID(arg2,arg3);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllECLByID_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::string arg2 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->predAllECLByID(arg2);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllECLByID_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllECLByID();
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllESMByID_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int arg4 ;
  long arg5 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  arg5 = (long)jarg5; 
  result = (arg1)->predAllESMByID(arg2,arg3,arg4,arg5);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllESMByID_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int arg4 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  result = (arg1)->predAllESMByID(arg2,arg3,arg4);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllESMByID_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->predAllESMByID(arg2,arg3);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllESMByID_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::string arg2 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->predAllESMByID(arg2);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllESMByID_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllESMByID();
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllFBMByID_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  long arg3 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (long)jarg3; 
  result = (arg1)->predAllFBMByID(arg2,arg3);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllFBMByID_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predAllFBMByID(arg2);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllFBMByID_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllFBMByID();
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHDIByID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllHDIByID();
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHPIByID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllHPIByID();
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHRGByID_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  int arg3 ;
  long arg4 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (long)jarg4; 
  result = (arg1)->predAllHRGByID(arg2,arg3,arg4);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHRGByID_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->predAllHRGByID(arg2,arg3);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHRGByID_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predAllHRGByID(arg2);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHRGByID_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllHRGByID();
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHYPByID_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jint jarg7) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  long arg7 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (long)jarg7; 
  result = (arg1)->predAllHYPByID(arg2,arg3,arg4,arg5,arg6,arg7);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHYPByID_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (arg1)->predAllHYPByID(arg2,arg3,arg4,arg5,arg6);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHYPByID_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (arg1)->predAllHYPByID(arg2,arg3,arg4,arg5);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHYPByID_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (arg1)->predAllHYPByID(arg2,arg3,arg4);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHYPByID_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  double arg2 ;
  double arg3 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (arg1)->predAllHYPByID(arg2,arg3);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHYPByID_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  double arg2 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (arg1)->predAllHYPByID(arg2);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllHYPByID_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllHYPByID();
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllJIDByID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllJIDByID();
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllKABByID_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predAllKABByID(arg2);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllKABByID_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllKABByID();
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllLCPByID_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  double arg2 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (arg1)->predAllLCPByID(arg2);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllLCPByID_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllLCPByID();
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllLHNByID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllLHNByID();
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllPATByID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllPATByID();
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllRALByID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllRALByID();
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllRNDByID_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  long arg2 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->predAllRNDByID(arg2);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllRNDByID_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllRNDByID();
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllSAIByID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllSAIByID();
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllSBMByID_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  long arg3 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (long)jarg3; 
  result = (arg1)->predAllSBMByID(arg2,arg3);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllSBMByID_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->predAllSBMByID(arg2);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllSBMByID_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllSBMByID();
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllSHPByID_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  long arg2 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->predAllSHPByID(arg2);
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllSHPByID_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllSHPByID();
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Predictor_1predAllSOIByID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Predictor *arg1 = (LinkPred::Simp::Predictor *) 0 ;
  std::vector< LinkPred::Simp::EdgeScoreByID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Predictor **)&jarg1; 
  result = (arg1)->predAllSOIByID();
  *(std::vector< LinkPred::Simp::EdgeScoreByID > **)&jresult = new std::vector< LinkPred::Simp::EdgeScoreByID >((const std::vector< LinkPred::Simp::EdgeScoreByID > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_PerfRes_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::PerfRes *arg1 = (LinkPred::Simp::PerfRes *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::PerfRes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_LinkPredJavaJNI_PerfRes_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  LinkPred::Simp::PerfRes *arg1 = (LinkPred::Simp::PerfRes *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::PerfRes **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_PerfRes_1res_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  LinkPred::Simp::PerfRes *arg1 = (LinkPred::Simp::PerfRes *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::PerfRes **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->res = arg2;
}


SWIGEXPORT jdouble JNICALL Java_LinkPredJavaJNI_PerfRes_1res_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  LinkPred::Simp::PerfRes *arg1 = (LinkPred::Simp::PerfRes *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::PerfRes **)&jarg1; 
  result = (double) ((arg1)->res);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_new_1PerfRes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  LinkPred::Simp::PerfRes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (LinkPred::Simp::PerfRes *)new LinkPred::Simp::PerfRes();
  *(LinkPred::Simp::PerfRes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_delete_1PerfRes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LinkPred::Simp::PerfRes *arg1 = (LinkPred::Simp::PerfRes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LinkPred::Simp::PerfRes **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_new_1PerfResVec_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< LinkPred::Simp::PerfRes > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< LinkPred::Simp::PerfRes > *)new std::vector< LinkPred::Simp::PerfRes >();
  *(std::vector< LinkPred::Simp::PerfRes > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_new_1PerfResVec_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< LinkPred::Simp::PerfRes > *arg1 = 0 ;
  std::vector< LinkPred::Simp::PerfRes > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::PerfRes > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::PerfRes > const & reference is null");
    return 0;
  } 
  result = (std::vector< LinkPred::Simp::PerfRes > *)new std::vector< LinkPred::Simp::PerfRes >((std::vector< LinkPred::Simp::PerfRes > const &)*arg1);
  *(std::vector< LinkPred::Simp::PerfRes > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_PerfResVec_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< LinkPred::Simp::PerfRes > *arg1 = (std::vector< LinkPred::Simp::PerfRes > *) 0 ;
  std::vector< LinkPred::Simp::PerfRes >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::PerfRes > **)&jarg1; 
  result = ((std::vector< LinkPred::Simp::PerfRes > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_PerfResVec_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< LinkPred::Simp::PerfRes > *arg1 = (std::vector< LinkPred::Simp::PerfRes > *) 0 ;
  std::vector< LinkPred::Simp::PerfRes >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::PerfRes > **)&jarg1; 
  arg2 = (std::vector< LinkPred::Simp::PerfRes >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_LinkPredJavaJNI_PerfResVec_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< LinkPred::Simp::PerfRes > *arg1 = (std::vector< LinkPred::Simp::PerfRes > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::PerfRes > **)&jarg1; 
  result = (bool)((std::vector< LinkPred::Simp::PerfRes > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_PerfResVec_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< LinkPred::Simp::PerfRes > *arg1 = (std::vector< LinkPred::Simp::PerfRes > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::PerfRes > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_new_1PerfResVec_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  LinkPred::Simp::PerfRes *arg2 = 0 ;
  std::vector< LinkPred::Simp::PerfRes > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(LinkPred::Simp::PerfRes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LinkPred::Simp::PerfRes const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< LinkPred::Simp::PerfRes > *)new_std_vector_Sl_LinkPred_Simp_PerfRes_Sg___SWIG_2(arg1,(LinkPred::Simp::PerfRes const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< LinkPred::Simp::PerfRes > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_LinkPredJavaJNI_PerfResVec_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< LinkPred::Simp::PerfRes > *arg1 = (std::vector< LinkPred::Simp::PerfRes > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::PerfRes > **)&jarg1; 
  try {
    result = std_vector_Sl_LinkPred_Simp_PerfRes_Sg__doSize((std::vector< LinkPred::Simp::PerfRes > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_PerfResVec_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< LinkPred::Simp::PerfRes > *arg1 = (std::vector< LinkPred::Simp::PerfRes > *) 0 ;
  std::vector< LinkPred::Simp::PerfRes >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< LinkPred::Simp::PerfRes > **)&jarg1; 
  arg2 = *(std::vector< LinkPred::Simp::PerfRes >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::PerfRes >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_LinkPred_Simp_PerfRes_Sg__doAdd__SWIG_0(arg1,(LinkPred::Simp::PerfRes const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_PerfResVec_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< LinkPred::Simp::PerfRes > *arg1 = (std::vector< LinkPred::Simp::PerfRes > *) 0 ;
  jint arg2 ;
  std::vector< LinkPred::Simp::PerfRes >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< LinkPred::Simp::PerfRes > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< LinkPred::Simp::PerfRes >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::PerfRes >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_LinkPred_Simp_PerfRes_Sg__doAdd__SWIG_1(arg1,arg2,(LinkPred::Simp::PerfRes const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_PerfResVec_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< LinkPred::Simp::PerfRes > *arg1 = (std::vector< LinkPred::Simp::PerfRes > *) 0 ;
  jint arg2 ;
  std::vector< LinkPred::Simp::PerfRes >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::PerfRes > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_LinkPred_Simp_PerfRes_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< LinkPred::Simp::PerfRes >::value_type **)&jresult = new std::vector< LinkPred::Simp::PerfRes >::value_type((const std::vector< LinkPred::Simp::PerfRes >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_PerfResVec_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< LinkPred::Simp::PerfRes > *arg1 = (std::vector< LinkPred::Simp::PerfRes > *) 0 ;
  jint arg2 ;
  std::vector< LinkPred::Simp::PerfRes >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::PerfRes > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< LinkPred::Simp::PerfRes >::value_type *) &std_vector_Sl_LinkPred_Simp_PerfRes_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< LinkPred::Simp::PerfRes >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_PerfResVec_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< LinkPred::Simp::PerfRes > *arg1 = (std::vector< LinkPred::Simp::PerfRes > *) 0 ;
  jint arg2 ;
  std::vector< LinkPred::Simp::PerfRes >::value_type *arg3 = 0 ;
  std::vector< LinkPred::Simp::PerfRes >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< LinkPred::Simp::PerfRes > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< LinkPred::Simp::PerfRes >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< LinkPred::Simp::PerfRes >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_LinkPred_Simp_PerfRes_Sg__doSet(arg1,arg2,(LinkPred::Simp::PerfRes const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< LinkPred::Simp::PerfRes >::value_type **)&jresult = new std::vector< LinkPred::Simp::PerfRes >::value_type((const std::vector< LinkPred::Simp::PerfRes >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_PerfResVec_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< LinkPred::Simp::PerfRes > *arg1 = (std::vector< LinkPred::Simp::PerfRes > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< LinkPred::Simp::PerfRes > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_LinkPred_Simp_PerfRes_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_delete_1PerfResVec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< LinkPred::Simp::PerfRes > *arg1 = (std::vector< LinkPred::Simp::PerfRes > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< LinkPred::Simp::PerfRes > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_new_1Evaluator_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  LinkPred::Simp::Evaluator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (LinkPred::Simp::Evaluator *)new LinkPred::Simp::Evaluator();
  *(LinkPred::Simp::Evaluator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_new_1Evaluator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinkPred::Simp::Evaluator *arg1 = 0 ;
  LinkPred::Simp::Evaluator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LinkPred::Simp::Evaluator const & reference is null");
    return 0;
  } 
  result = (LinkPred::Simp::Evaluator *)new LinkPred::Simp::Evaluator((LinkPred::Simp::Evaluator const &)*arg1);
  *(LinkPred::Simp::Evaluator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_delete_1Evaluator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addADA_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addADA((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addADA_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addADA();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addCNE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addCNE((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addCNE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addCNE();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addCRA_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addCRA((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addCRA_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addCRA();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addECL_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5, jdouble jarg6, jdouble jarg7, jint jarg8) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  int arg5 ;
  double arg6 ;
  double arg7 ;
  long arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (long)jarg8; 
  (arg1)->addECL((std::string const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addECL_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5, jdouble jarg6, jdouble jarg7) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  int arg5 ;
  double arg6 ;
  double arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  (arg1)->addECL((std::string const &)*arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addECL_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5, jdouble jarg6) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  int arg5 ;
  double arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  (arg1)->addECL((std::string const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addECL_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  (arg1)->addECL((std::string const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addECL_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->addECL((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addECL_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addECL((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addECL_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addECL((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addECL_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addECL();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addESM_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5, jint jarg6) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  int arg5 ;
  long arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  arg6 = (long)jarg6; 
  (arg1)->addESM((std::string const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addESM_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  (arg1)->addESM((std::string const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addESM_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->addESM((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addESM_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addESM((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addESM_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addESM((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addESM_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addESM();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addFBM_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  long arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (long)jarg4; 
  (arg1)->addFBM((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addFBM_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->addFBM((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addFBM_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addFBM((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addFBM_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addFBM();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addHDI_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addHDI((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addHDI_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addHDI();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addHPI_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addHPI((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addHPI_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addHPI();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addHRG_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  long arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (long)jarg5; 
  (arg1)->addHRG((std::string const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addHRG_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->addHRG((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addHRG_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->addHRG((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addHRG_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addHRG((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addHRG_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addHRG();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addHYP_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jint jarg8) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  long arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (long)jarg8; 
  (arg1)->addHYP((std::string const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addHYP_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  (arg1)->addHYP((std::string const &)*arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addHYP_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  (arg1)->addHYP((std::string const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addHYP_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->addHYP((std::string const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addHYP_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->addHYP((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addHYP_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->addHYP((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addHYP_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addHYP((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addHYP_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addHYP();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addJID_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addJID((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addJID_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addJID();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addKAB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->addKAB((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addKAB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addKAB((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addKAB_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addKAB();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addLCP_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->addLCP((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addLCP_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addLCP((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addLCP_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addLCP();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addLHN_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addLHN((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addLHN_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addLHN();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addPAT_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addPAT((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addPAT_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addPAT();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addPST_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addPST((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addPST_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addPST((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addPST_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addPST();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addRAL_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addRAL((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addRAL_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addRAL();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addRND_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (long)jarg3; 
  (arg1)->addRND((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addRND_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addRND((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addRND_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addRND();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addSAI_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addSAI((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addSAI_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addSAI();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addSBM_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  long arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (long)jarg4; 
  (arg1)->addSBM((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addSBM_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->addSBM((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addSBM_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addSBM((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addSBM_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addSBM();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addSHP_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (long)jarg3; 
  (arg1)->addSHP((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addSHP_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addSHP((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addSHP_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addSHP();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addSOI_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addSOI((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addSOI_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addSOI();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addROC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addROC();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addPR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addPR();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1addTPR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  (arg1)->addTPR();
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1genTestData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jdouble jarg5, jboolean jarg6, jint jarg7) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  bool arg6 ;
  long arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (double)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (long)jarg7; 
  (arg1)->genTestData((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1genTestData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jdouble jarg5, jboolean jarg6) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  bool arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (double)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->genTestData((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1genTestData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jdouble jarg5) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (double)jarg5; 
  (arg1)->genTestData((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1genTestData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->genTestData((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1run_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jdouble jarg4, jboolean jarg5, jint jarg6) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  double arg4 ;
  bool arg5 ;
  long arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (long)jarg6; 
  (arg1)->run((std::string const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1run_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jdouble jarg4, jboolean jarg5) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  double arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->run((std::string const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1run_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jdouble jarg4) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->run((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1run_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->run((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1run_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->run((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_LinkPredJavaJNI_Evaluator_1run_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->run((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_LinkPredJavaJNI_Evaluator_1getPerfRes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  LinkPred::Simp::Evaluator *arg1 = (LinkPred::Simp::Evaluator *) 0 ;
  int arg2 ;
  std::vector< LinkPred::Simp::PerfRes > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinkPred::Simp::Evaluator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getPerfRes(arg2);
  *(std::vector< LinkPred::Simp::PerfRes > **)&jresult = new std::vector< LinkPred::Simp::PerfRes >((const std::vector< LinkPred::Simp::PerfRes > &)result); 
  return jresult;
}


#ifdef __cplusplus
}
#endif

